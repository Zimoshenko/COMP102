#BlueJ class context
comment0.params=
comment0.target=WaveformAnalyser()
comment0.text=\ Constructor\:\r\n\ Set\ up\ the\ ten\ buttons\ and\ mouselistener\r\n
comment1.params=
comment1.target=void\ doRead()
comment1.text=\r\n\ [CORE]\r\n\ Clears\ the\ panes,\ \r\n\ Creates\ an\ ArrayList\ stored\ in\ a\ field,\ then\r\n\ Asks\ user\ for\ a\ waveform\ file\ (eg\ waveform1.txt)\ \r\n\ Reads\ data\ from\ the\ file\ into\ the\ ArrayList\r\n
comment10.params=action\ x\ y
comment10.target=void\ doMouse(java.lang.String,\ double,\ double)
comment10.text=\r\n\ [CHALLENGE]\r\n\ Lets\ user\ select\ a\ region\ of\ the\ waveform\ with\ the\ mouse\r\n\ and\ deletes\ that\ section\ of\ the\ waveform.\r\n
comment11.params=arguments
comment11.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=void\ doDisplay()
comment2.text=\r\n\ [CORE]\r\n\ Displays\ the\ waveform\ as\ a\ line\ graph,\r\n\ The\ n'th\ value\ in\ waveform\ is\ displayed\ at\r\n\ \ \ \ x-position\ is\ GRAPH_LEFT\ +\ n\r\n\ \ \ \ y-position\ is\ ZERO_LINE\ -\ the\ value\r\n\ Plots\ a\ line\ graph\ of\ all\ the\ points\ with\ a\ blue\ line\ between\r\n\ \ each\ pair\ of\ adjacent\ points\r\n\ Draw\ the\ horizontal\ line\ representing\ the\ value\ zero.\r\n\ Uses\ GRAPH_LEFT\ and\ ZERO_LINE\ for\ the\ dimensions\ and\ positions\ of\ the\ graph.\r\n\ Don't\ worry\ if\ the\ lines\ go\ off\ the\ window\r\n
comment3.params=
comment3.target=void\ doReportDistortion()
comment3.text=\r\n\ [CORE]\r\n\ Computes\ and\ prints\ out\ the\ fraction\ of\ time\ the\ signal\ is\ distorted.\ \r\n\ This\ fraction\ of\ time\ is\ defined\ as\ the\ number\ of\ distorted\ values,\ divided\ by\ the\ number\ of\ values.\ \r\n\ A\ distorted\ value\ is\ defined\ as\ one\ whose\ absolute\r\n\ value\ is\ greater\ than\ the\ value\ of\ THRESHOLD\ \r\n\ [Hint]\ You\ may\ find\ Math.abs()\ useful\ for\ this\ method\ -\ it\ computes\ the\ absolute\ value\r\n
comment4.params=
comment4.target=void\ doSpread()
comment4.text=\r\n\ [CORE]\r\n\ The\ spread\ is\ the\ difference\ between\ the\ maximum\ and\ minimum\ values\ of\ the\ waveform.\r\n\ Finds\ the\ maximum\ and\ minimum\ values,\ then\r\n\ Displays\ the\ spread\ by\ drawing\ two\ horizontal\ lines\ on\ top\ of\ the\ waveform\:\ \r\n\ \ \ one\ green\ line\ for\ the\ maximum\ value,\ and\r\n\ \ \ one\ red\ line\ for\ the\ minimum\ value.\r\n
comment5.params=
comment5.target=void\ doDisplayDistortion()
comment5.text=\r\n\ [COMPLETION]\ \ [Fancy\ version\ of\ doDisplay]\r\n\ Display\ the\ waveform\ as\ a\ line\ graph.\ \r\n\ Draw\ a\ line\ between\ each\ pair\ of\ adjacent\ points\r\n\ \ \ *\ If\ neither\ of\ the\ points\ is\ distorted,\ the\ line\ is\ BLUE\r\n\ \ \ *\ If\ either\ of\ the\ two\ end\ points\ is\ distorted,\ the\ line\ is\ RED\r\n\ Draw\ the\ horizontal\ lines\ representing\ the\ value\ zero\ and\ thresholds\ values.\r\n\ Uses\ THRESHOLD\ to\ determine\ distorted\ values.\r\n\ Uses\ GRAPH_LEFT\ and\ ZERO_LINE\ for\ the\ dimensions\ and\ positions\ of\ the\ graph.\r\n\ [Hint]\ You\ may\ find\ Math.abs(int\ a)\ useful\ for\ this\ method.\r\n\ You\ may\ assume\ that\ all\ the\ values\ are\ between\ -250\ and\ +250.\r\n
comment6.params=
comment6.target=void\ doHighlightPeaks()
comment6.text=\r\n\ [COMPLETION]\r\n\ Plots\ the\ peaks\ with\ small\ green\ circles.\ \r\n\ \ \ \ A\ peak\ is\ defined\ as\ a\ value\ that\ is\ greater\ or\ equals\ to\ both\ its\r\n\ \ \ \ neighbouring\ values.\r\n\ Note\ the\ size\ of\ the\ circle\ is\ in\ the\ constant\ SIZE_CIRCLE\r\n\ You\ may\ assume\ that\ peaks\ values\ differ\ from\ their\ neighbouring\ points.\r\n
comment7.params=
comment7.target=void\ doNormalise()
comment7.text=\r\n\ [COMPLETION]\r\n\ Finds\ the\ largest\ value\ (positive\ or\ negative)\ in\ the\ waveform,\ and\r\n\ "normalises"\ all\ the\ values\ -\ multiplies\ them\ by\ threshold/maximum\ -\ so\r\n\ that\ the\ largest\ value\ is\ now\ equal\ to\ the\ distortion\ threshold.\r\n\ Then\ redraws\ the\ waveform.\r\n
comment8.params=
comment8.target=void\ doEnvelope()
comment8.text=\r\n\ [CHALLENGE]\r\n\ Displays\ the\ upper\ envelope\ with\ GREEN\ lines\ connecting\ all\ the\ peaks.\r\n\ \ \ \ A\ peak\ is\ defined\ as\ a\ point\ that\ is\ greater\ or\ equal\ to\ *both*\ neighbouring\ points.\r\n
comment9.params=
comment9.target=void\ doSave()
comment9.text=\r\n\ [CHALLENGE]\r\n\ Saves\ the\ current\ waveform\ values\ into\ a\ file\r\n
numComments=12
